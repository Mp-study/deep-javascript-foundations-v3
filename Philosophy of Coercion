### Numbers

```jsx
var bin = 0b1111;    // bin will be set to 15
var oct = 0o17;      // oct will be set to 15
var oxx = 017;       // oxx will be set to 15
var hex = 0xF;       // hex will be set to 15
// note: bB oO xX are all valid
```

### Primitives types

- number
- string
- boolean
- object
- symbol: [Symbol.iteratoer]
- undefined
- null: typeof null === ‘object’
- BigInt

NaN

```jsx
NaN === NaN // false
```

![Screenshot 2023-07-05 at 11.20.39.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a652cfb3-e246-4a3d-bfb7-2337bf589769/Screenshot_2023-07-05_at_11.20.39.png)

### how to compare 0 to -0

```jsx
Math.sign(123); // 1
Math.sign(-123); // -1
Math.sign('-123'); // -1
Math.sign(0); // 0 ???
Math.sign(-0); // -0 ???

Object.is(-0, -0) // true
0 === 0 // true
0 === -0 // true

Object.is(0, -0) // false

function sign(num) {
	if (num !== 0) {
		return Math.sign(num);
	}

	return Object.is(num, -0) ? -1 : 1;
}
```

# Philosophy of Coercion

---

형변환 필요한가?

### Intentional Coercion

Every operation has to be clear

### Culture of Learning

### Code Communication Q&A

### Implicit Coercion

### Understanding Features

### Coercion Exercise

```markdown
# Working With Coercion

In this exercise, you will define some validation functions that check user inputs (such as from DOM elements). You'll need to properly handle the coercions of the various value types.

## Instructions

1. Define an `isValidName(..)` validator that takes one parameter, `name`. The validator returns `true` if all the following match the parameter (`false` otherwise):

	- must be a string
	- must be non-empty
	- must contain non-whitespace of at least 3 characters

2. Define an `hoursAttended(..)` validator that takes two parameters, `attended` and `length`. The validator returns `true` if all the following match the two parameters (`false` otherwise):

	- either parameter may only be a string or number
	- both parameters should be treated as numbers
	- both numbers must be 0 or higher
	- both numbers must be whole numbers
	- `attended` must be less than or equal to `length`
```

```jsx
// TODO: write the validation functions

// tests:
console.log(isValidName("Frank") === true);
console.log(hoursAttended(6,10) === true);
console.log(hoursAttended(6,"10") === true);
console.log(hoursAttended("6",10) === true);
console.log(hoursAttended("6","10") === true);

console.log(isValidName(false) === false);
console.log(isValidName(null) === false);
console.log(isValidName(undefined) === false);
console.log(isValidName("") === false);
console.log(isValidName("  \t\n") === false);
console.log(isValidName("X") === false);
console.log(hoursAttended("",6) === false);
console.log(hoursAttended(6,"") === false);
console.log(hoursAttended("","") === false);
console.log(hoursAttended("foo",6) === false);
console.log(hoursAttended(6,"foo") === false);
console.log(hoursAttended("foo","bar") === false);
console.log(hoursAttended(null,null) === false);
console.log(hoursAttended(null,undefined) === false);
console.log(hoursAttended(undefined,null) === false);
console.log(hoursAttended(undefined,undefined) === false);
console.log(hoursAttended(false,false) === false);
console.log(hoursAttended(false,true) === false);
console.log(hoursAttended(true,false) === false);
console.log(hoursAttended(true,true) === false);
console.log(hoursAttended(10,6) === false);
console.log(hoursAttended(10,"6") === false);
console.log(hoursAttended("10",6) === false);
console.log(hoursAttended("10","6") === false);
console.log(hoursAttended(6,10.1) === false);
console.log(hoursAttended(6.1,10) === false);
console.log(hoursAttended(6,"10.1") === false);
console.log(hoursAttended("6.1",10) === false);
console.log(hoursAttended("6.1","10.1") === false);
```

### Coercion Exercise Solution

- solution
    
    ```jsx
    function isValidName(name) {
    	if (
    		typeof name == "string" &&
    		name.trim().length >= 3
    	) {
    		return true;
    	}
    
    	return false;
    }
    
    function hoursAttended(attended,length) {
    	if (
    		typeof attended == "string" &&
    		attended.trim() != ""
    	) {
    		attended = Number(attended);
    	}
    	if (
    		typeof length == "string" &&
    		length.trim() != ""
    	) {
    		length = Number(length);
    	}
    	if (
    		typeof attended == "number" &&
    		typeof length == "number" &&
    		attended <= length &&
    		attended >= 0 &&
    		length >= 0 &&
    		Number.isInteger(attended) &&
    		Number.isInteger(length)
    	) {
    		return true;
    	}
    
    	return false;
    }
    
    // tests:
    console.log(isValidName("Frank") === true);
    console.log(hoursAttended(6,10) === true);
    console.log(hoursAttended(6,"10") === true);
    console.log(hoursAttended("6",10) === true);
    console.log(hoursAttended("6","10") === true);
    
    console.log(isValidName(false) === false);
    console.log(isValidName(null) === false);
    console.log(isValidName(undefined) === false);
    console.log(isValidName("") === false);
    console.log(isValidName("  \t\n") === false);
    console.log(isValidName("X") === false);
    console.log(hoursAttended("",6) === false);
    console.log(hoursAttended(6,"") === false);
    console.log(hoursAttended("","") === false);
    console.log(hoursAttended("foo",6) === false);
    console.log(hoursAttended(6,"foo") === false);
    console.log(hoursAttended("foo","bar") === false);
    console.log(hoursAttended(null,null) === false);
    console.log(hoursAttended(null,undefined) === false);
    console.log(hoursAttended(undefined,null) === false);
    console.log(hoursAttended(undefined,undefined) === false);
    console.log(hoursAttended(false,false) === false);
    console.log(hoursAttended(false,true) === false);
    console.log(hoursAttended(true,false) === false);
    console.log(hoursAttended(true,true) === false);
    console.log(hoursAttended(10,6) === false);
    console.log(hoursAttended(10,"6") === false);
    console.log(hoursAttended("10",6) === false);
    console.log(hoursAttended("10","6") === false);
    console.log(hoursAttended(6,10.1) === false);
    console.log(hoursAttended(6.1,10) === false);
    console.log(hoursAttended(6,"10.1") === false);
    console.log(hoursAttended("6.1",10) === false);
    console.log(hoursAttended("6.1","10.1") === false);
    ```
